basePath: /
definitions:
  entities.Combination:
    properties:
      first_movie:
        type: string
      id:
        type: string
      list_id:
        type: string
      second_movie:
        type: string
    type: object
  entities.List:
    properties:
      active:
        type: boolean
      combinations:
        items:
          $ref: '#/definitions/entities.Combination'
        type: array
      cover:
        type: string
      created_at:
        type: string
      deactivated_at:
        type: string
      id:
        type: string
      movies:
        items:
          $ref: '#/definitions/entities.Movie'
        type: array
      name:
        type: string
      updated_at:
        type: string
    type: object
  entities.Movie:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      deactivated_at:
        type: string
      external_id:
        type: string
      id:
        type: string
      name:
        type: string
      poster:
        type: string
      updated_at:
        type: string
      votes_count:
        type: integer
      year:
        type: integer
    type: object
  entities.Vote:
    properties:
      active:
        type: boolean
      combination_id:
        type: string
      created_at:
        type: string
      deactivated_at:
        type: string
      id:
        type: string
      user_id:
        type: string
      winner_id:
        type: string
    type: object
  usecases.AddMoviesListOutputDTO:
    properties:
      content_message:
        type: string
      success_message:
        type: string
    type: object
  usecases.CreateListOutputDTO:
    properties:
      content_message:
        type: string
      success_message:
        type: string
    type: object
  usecases.CreateMovieOutputDTO:
    properties:
      content_message:
        type: string
      success_message:
        type: string
    type: object
  usecases.CreateUserInputDto:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  usecases.CreateUserOutputDto:
    properties:
      content_message:
        type: string
      name:
        type: string
      success_message:
        type: string
    type: object
  usecases.GetListByIDOutputDTO:
    properties:
      list:
        $ref: '#/definitions/entities.List'
      number_of_votes:
        type: integer
      rank_movies:
        items:
          $ref: '#/definitions/entities.Movie'
        type: array
    type: object
  usecases.GetListByUserIDOutputDTO:
    properties:
      list:
        $ref: '#/definitions/entities.List'
      number_of_votes:
        type: integer
      rank_movies:
        items:
          $ref: '#/definitions/entities.Movie'
        type: array
      votes:
        items:
          $ref: '#/definitions/entities.Vote'
        type: array
    type: object
  usecases.List:
    properties:
      cover:
        type: string
      movies:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  usecases.LoginInputDto:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  usecases.LoginOutputDto:
    properties:
      access_token:
        type: string
      content_message:
        type: string
      name:
        type: string
      success_message:
        type: string
    type: object
  usecases.Movie:
    properties:
      external_id:
        type: string
      name:
        type: string
      poster:
        type: string
      year:
        type: integer
    type: object
  usecases.Movies:
    properties:
      list_id:
        type: string
      movies:
        items:
          type: string
        type: array
    type: object
  usecases.Vote:
    properties:
      combination_id:
        type: string
      list_id:
        type: string
      winner_id:
        type: string
    type: object
  usecases.VoteOutputDTO:
    properties:
      content_message:
        type: string
      success_message:
        type: string
    type: object
  util.ProblemDetails:
    properties:
      detail:
        type: string
      instance:
        type: string
      status:
        type: integer
      title:
        type: string
      type:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: contato@youchoose.com.br
    name: You Choose
    url: http://www.youchoose.com.br
  description: This is an API for managing expenses.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: You Choose API
  version: "1.0"
paths:
  /lists:
    get:
      consumes:
      - application/json
      description: Get a list of movies and numbers of votes
      parameters:
      - description: List id
        in: query
        name: list_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/usecases.GetListByIDOutputDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ProblemDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ProblemDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ProblemDetails'
      summary: Get List
      tags:
      - Lists
    post:
      consumes:
      - application/json
      description: Registers a new list in the system
      parameters:
      - description: List data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.List'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/usecases.CreateListOutputDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ProblemDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ProblemDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ProblemDetails'
      security:
      - BearerAuth: []
      summary: Create a new list
      tags:
      - Lists
  /lists/movies:
    post:
      consumes:
      - application/json
      description: Add new movies to list
      parameters:
      - description: AddMoviesList data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.Movies'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/usecases.AddMoviesListOutputDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ProblemDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ProblemDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ProblemDetails'
      security:
      - BearerAuth: []
      summary: Add movies to list
      tags:
      - Lists
  /lists/users:
    get:
      consumes:
      - application/json
      description: Get a list of movies and votes
      parameters:
      - description: List id
        in: query
        name: list_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/usecases.GetListByUserIDOutputDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ProblemDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ProblemDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ProblemDetails'
      security:
      - BearerAuth: []
      summary: Get List
      tags:
      - Lists
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: User credentials
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/usecases.LoginInputDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecases.LoginOutputDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ProblemDetails'
      summary: Login a user
      tags:
      - Authentication
  /movies:
    post:
      consumes:
      - application/json
      description: Registers a new movie in the system
      parameters:
      - description: Movie data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.Movie'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/usecases.CreateMovieOutputDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ProblemDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ProblemDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ProblemDetails'
      security:
      - BearerAuth: []
      summary: Create a new movie
      tags:
      - Movies
  /signup:
    post:
      consumes:
      - application/json
      description: Registers a new user in the system
      parameters:
      - description: User data
        in: body
        name: CreateUserRequest
        required: true
        schema:
          $ref: '#/definitions/usecases.CreateUserInputDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/usecases.CreateUserOutputDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ProblemDetails'
      summary: Create a new user
      tags:
      - Authentication
  /votes:
    post:
      consumes:
      - application/json
      description: Registers a new vote in the system
      parameters:
      - description: Vote data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.Vote'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/usecases.VoteOutputDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ProblemDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ProblemDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ProblemDetails'
      security:
      - BearerAuth: []
      summary: Create a new vote
      tags:
      - Votes
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
